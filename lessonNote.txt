JavaScript:

Three main component:
1.Syntax Parser
A program that reads your code and determine what it does and its grammar is valid or not.

2.Execution context
A Wrapper to help manage the code that is running.
There are lot of lexical environments which one currently running is managed via
execution context.
It can contain things beyond what you have written in the code.

3.lexical Environment
Where something sits physically in the code that you write
Lexical means to "having to do with Words or Grammar". A lexical Environment exits in a
programing language in which you write something is important.
Where a piece of code or a variable is in the code and what surrounds it.

Objects in JavaScript:
Collection of Name(key)/Value pair.

Name(key)/Value pair:
A name which maps to a unique value
Address:
    {
      Street: 'Main',
      Number: 100
      Apartment:
      {
      Floor: 3,
      Number: 301
      }
    }
In the above example Address thats a name and its value is an Object(Collection of
Name/Value Pair) and Apartment has its Value as an Object.

Global Environment/Global Object:
The JavaScript Engine Wraps the code using an Global Execution Context.
The Global Execution Context Creates a Global Object and a Special Variable called
"this" . The JavaScript Engine creates these two things when the code is wrapped using the
Global Execution Context.

run the code in test.html
The syntax Parser kicks in and then the JavaScript Engine creates the Execution context
which gives Global Object and the variable 'this'. Now type 'this' in your browser console
to see the Global Object 'window'. each tab in the browser is separate Execution context hence
contains its own Global Object.

Global:
In Js it means "Not inside a Function"
Your Variable and functions when lexically not siting inside a function can be accessed
using the Global Object

Outer Environment:
when you are executing code inside a function the Outer Environment is the code outside the
function but when executing at the base level there's no Outer Environment.

so the Execution Context gives the Global Object, 'this', Outer Environment

Execution Context: Creation and Hoisting
Execution Context is created in 2 phases in the first phase called the creation phase in which
regards to the global context a Global Object, 'this', Outer Environment is created by the
Execution context then when the parser goes thru' the code it allocate the memory space/
location for the variable and Functions and this phenomenon is called the Hoisting.

And the initial value assigned to the variable in the memory by the JS Engine is 'undefined'
but for the functions the whole function is available.

JS and Undefined:
undefined is a keyword in JS. Refer undefined.js

Execution Context: Code Execution
