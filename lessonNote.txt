JavaScript:

Three main component:
1.Syntax Parser
A program that reads your code and determine what it does and its grammar is valid or not.

2.Execution context
A Wrapper to help manage the code that is running.
There are lot of lexical environments which one currently running is managed via
execution context.
It can contain things beyond what you have written in the code.

3.lexical Environment
Where something sits physically in the code that you write
Lexical means to "having to do with Words or Grammar". A lexical Environment exits in a
programing language in which you write something is important.
Where a piece of code or a variable is in the code and what surrounds it.

Objects in JavaScript:
Collection of Name(key)/Value pair.

Name(key)/Value pair:
A name which maps to a unique value
Address:
    {
      Street: 'Main',
      Number: 100
      Apartment:
      {
      Floor: 3,
      Number: 301
      }
    }
In the above example Address thats a name and its value is an Object(Collection of
Name/Value Pair) and Apartment has its Value as an Object.

Global Environment/Global Object:
The JavaScript Engine Wraps the code using an Global Execution Context.
The Global Execution Context Creates a Global Object and a Special Variable called
"this" . The JavaScript Engine creates these two things when the code is wrapped using the
Global Execution Context.

run the code in test.html
The syntax Parser kicks in and then the JavaScript Engine creates the Execution context
which gives Global Object and the variable 'this'. Now type 'this' in your browser console
to see the Global Object 'window'. each tab in the browser is separate Execution context hence
contains its own Global Object.

Global:
In Js it means "Not inside a Function"
Your Variable and functions when lexically not siting inside a function can be accessed
using the Global Object

Outer Environment:
when you are executing code inside a function the Outer Environment is the code outside the
function but when executing at the base level there's no Outer Environment.

so the Execution Context gives the Global Object, 'this', Outer Environment

Execution Context: Creation and Hoisting Phase
Execution Context is created in 2 phases in the first phase called the creation phase in which
regards to the global context a Global Object, 'this', Outer Environment is created by the
Execution context then when the parser goes thru' the code it allocate the memory space/
location for the variable and Functions and this phenomenon is called the Hoisting.

And the initial value assigned to the variable in the memory by the JS Engine is 'undefined'
but for the functions the whole function is available.

JS and Undefined:
undefined is a keyword in JS. Refer undefined.js

Execution Context: Code Execution Phase
Following the creation phase then the code execution phase executes the code line by line.
And perform all the operation and assignment.

Single Threaded, Synchronous Execution:
one command at a time.

Function invocation and Execution Stack:
executeStack.js
When the js file started executing in the creation phase of Global Execution it sets memory
for the variables and assigned it to undefined and then sets memory for the functions. Then
in the code execution when it sees the function call it creates an Execution context for the
function and place it on top of the Global Execution context and starts execution its code if
theres any function call in that context it will create another Execution context for that
function and place it on top of the stack so when all the code of the top execution context
got finished it got popped out of the stack and continue with below one. (same like activation
chain in java).

Functions, Context, Variable Environment:
Where the variable live and how they relate to each other in memory.
scope of variable refer scope.js

scope chain:
the reference to outer Environment.that depends on the lexical environment. refer scope.js

Scope, ES6, let:
scope is where a variable is available in your code. And if its truly the same variable, or
a new copy.

In ES6 we can use let to declare a varibale to achieve block scoping.
if a varibale is declared using let during the execution phase as usual its been placed in
memory and assigned to undefined but when you try to use it before the assignment for that
varibale is executed the JS Engine will throw an error. And also if let is used inside a block
that variable is availabe only inside the block and at the time of execution.

Event Queue:
Refer event.js in that how JS handles events placed by the browser to the event queue.
The JS will execute the event once the execution stack is empty. so any long running function
will slow down the execution of the event.

Types and JS:
JS is dynamically typed language. it means you dont tell the JS Engine what type of data
a variable holds, JS Engine figures it outr while your code is running.
Variables can hold different types of values because its all figured out during execution

Primitive Data Types:
undefined, null, boolean, number, string, symbol (used in ES6)

Opeartors:
Operator is a function that takes 2 parameter in case + abd return the result.uses infix

Operator Precedence, Associativity:
Which operator function gets called first.Higher precedence wins.
left to right or right to left.

Coercion:
converting a value from one typr to another

using === prevent coercion when comapring two varibale eg ; equal.js
the || operator will return the value which can be coerced to ture. refer default.js

refer App.js, lib1.js, lib2.js

Objects and Functions:
objects and the dot
Objects in JS have - Primitive property, Object property, Function property.
refer object.js for nore details into objects in JS

----------------------------------------------------------------------------------
